It's a user defined data type called Class.
Variables of user defined data type(The type of class(class type)) is called Object.
Example..................................
Class Planet:
      pass
Earth=Planet()  #Earth & Venus is an Object (User defined variable)
Venus=Planet()
print(Earth)
print(Venus)
...........................................
Classes are used to bind the Variables and functions together into a concrete unit.

System defined class methods:
__str__()

Implement this method to achive the below purpose:

1. If you want more informative human readable output when you print an object.
2. If you want to explicitly convert an object into string

__repr__()

It's an ulternative method of __str__()

__init__()

This is a constructor function. Constructor helps to assign values to objects of your class.

__del__()

This is a destructor function. This function is called whenever an object is deleted.
.....................Example............................................................
class Point:

    def __init__(self,p_x=0,p_y=0):
        self.x=p_x
        self.y=p_y
    def __str__(self):
        output='('+str(self.x)+','+str(self.y)+')'
        return output
    def __repr__(self):
        output='('+str(self.x)+','+str(self.y)+')'
        print(output)
    def __del__(self):
        print("Deleting the object "+str(self))
class Line:
    def __init__(self,p1,p2):
        self.end1=p1
        self.end2=p2
    def __str__(self):
        return "Line starts at "+str(self.end1)+" and Line ends at"+str(self.end2)

p1=Point(10,20)
p2=Point(1,2)
p3=Point()


print(p1)
print(p2)
print(p3)

Line1=Line(p1,p2)
print(Line1)

def find_center_line(Line):
    cent_x=(Line.end1.x+Line.end2.x)/2
    cent_y=(Line.end1.y+Line.end2.y)/2
    center=Point(cent_x,cent_y)
    return center
center_point=find_center_line(Line1)
print(center_point)

Output-->
(10,20)
(1,2)
(0,0)
Line starts at (10,20) and Line ends at(1,2)
(5.5,11.0)
Deleting the object (10,20)
Deleting the object (1,2)
Deleting the object (0,0)
Deleting the object (5.5,11.0)
........................................................................................

class complex:

    def __init__(self,x,y):
        self.real=x
        self.imag=y
        
    def __str__(self):
        return str(self.real)+ "+" +str(self.imag)+"i"
        
    def __add__(self, obj):
        new_x=self.real+obj.real
        new_y=self.imag+obj.imag
        res=complex(new_x,new_y)
        return res
        
    def __sub__(self,obj):
        real_x=self.real-obj.real
        imag_y=self.imag-obj.imag
        res=complex(real_x,imag_y)
        return res
        
    def __truediv__(self,obj):
        return "Division not supported"
        
    def __floordiv__(self,obj):
        new_x=self.real//obj.real
        new_y=self.imag//obj.imag
        res=complex(new_x,new_y)
        return res

c1=complex(10,20)
c2=complex(1,2)
c3=c1+c2
c4=c1-c2
print("sum :",c3)
print("Diff :",c4)
print("Div :",c1/c2)
print(c2//c1)

........................................................................................

******************************INHERITANCE***********************************************

Inheritance is the creation of specialized classes from general classes.
The general class is the base class.
The new specialized class is the derived class.
..........................Example.......................................................

class Phone:
    def textmsg(self):
        print("Message sent successfully")
    def call(self):
        print("Making a call")

class Cameraphone(Phone):
    #It inherits the textmag() and call() from phone class
    def picture(self):
        print("Take a photo")

class Android:
    def playstore(self):
        print("Download google pay")

class Smartphone(Cameraphone,Android): #Base classes
    def call(self):
        print("Making 4G call")

Mynewphone=Smartphone()
Mynewphone.textmsg()
Mynewphone.call()
Mynewphone.picture()
Mynewphone.playstore()


